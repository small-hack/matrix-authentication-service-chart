---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "matrix-authentication-service.fullname" . }}-templating-script
data:
  templateconfig.sh: |-
    BLUE='\033[1;34m'
    GREEN='\033[1;32m'
    NC='\033[0m'

    # templates out the secrets object section of the config.yaml
    export SECRETS=`yq '.secrets' /data/config-secrets.yaml`
    export EXISTING_SECRET=`cat /data/config.yaml | yq .secrets`
    echo -e "\n${GREEN}echo EXISTING_SECRET variable${NC}"
    echo -e "$EXISTING_SECRET"
    if [ "$EXISTING_SECRET" == "{}" ] || [ "$EXISTING_SECRET" == "null" ]; then
        echo -e "\n${BLUE}updating new secret keys in config.yaml${NC}"
        yq eval -i '.secrets = env(SECRETS)' /data/config.yaml
    else
        echo -e "\n${BLUE}secrets object already exist, so we will not overwrite it${NC}"
    fi
    rm /data/config-secrets.yaml || echo -e "\n${BLUE}no secret file to clean up, moving on...${NC}"

    {{- if not .Values.mas.database.uri }}
    # database section...
    if [ -z "$PGSSLMODE" ] || [ "$PGSSLMODE" == "disable" ]; then
        export PG_URI="postgresql://${PGUSER}:${PGPASSWORD}@${PGHOST}:${PGPORT}/${PGDATABASE}"
    else
        export PG_URI="postgresql://${PGUSER}@${PGHOST}:${PGPORT}/${PGDATABASE}?sslmode=${PGSSLMODE}"
    fi
    echo -e "\n${BLUE}Update postgresql URI${NC}: ${GREEN}$PG_URI${NC}"
    yq eval -i '.database.uri = env(PG_URI)' /data/config.yaml
    {{- end }}

    # matrix section...
    echo -e "\n${BLUE}Update matrix homserver, secret, and endpoint${NC}"
    yq eval -i '.matrix.homeserver = env(MATRIX_HOMESERVER)' /data/config.yaml && \
    yq eval -i '.matrix.secret = env(MATRIX_SECRET)' /data/config.yaml && \
    yq eval -i '.matrix.endpoint = env(MATRIX_ENDPOINT)' /data/config.yaml

    # upstream oauth2 section...
    {{- if .Values.mas.upstream_oauth2.existingSecret }}
    echo -e "\n${BLUE}updating upstream_oauth2.providers.issuer, client_id, and client_secret${NC}"
    {{- if .Values.mas.upstream_oauth2.secretKeys.id }}
    yq eval -i '.upstream_oauth2.providers[0].id = env(PROVIDER_ID)' /data/config.yaml && \
    {{- end }}
    {{- if .Values.mas.upstream_oauth2.secretKeys.issuer }}
    yq eval -i '.upstream_oauth2.providers[0].issuer = env(ISSUER)' /data/config.yaml && \
    {{- end }}
    yq eval -i '.upstream_oauth2.providers[0].client_id = env(CLIENT_ID)' /data/config.yaml && \
    yq eval -i '.upstream_oauth2.providers[0].client_secret = env(CLIENT_SECRET)' /data/config.yaml

    {{- if .Values.mas.upstream_oauth2.secretKeys.authorization_endpoint }}
    echo -e "\n${BLUE}Updating authorization_endpoint of config.yaml${NC}"
    yq eval -i '.upstream_oauth2.providers[0].authorization_endpoint = env(AUTH_ENDPOINT)' /data/config.yaml
    {{- end }} {{/* end auth endpoint */}}

    {{- if .Values.mas.upstream_oauth2.secretKeys.token_endpoint }}
    echo -e "\n${BLUE}Updating token endpoint of config.yaml${NC}"
    yq eval -i '.upstream_oauth2.providers[0].token_endpoint = env(TOKEN_ENDPOINT)' /data/config.yaml
    {{- end }} {{/* end token endpoint */}}

    {{- if .Values.mas.upstream_oauth2.secretKeys.userinfo_endpoint }}
    echo -e "\n${BLUE}Updating userinfo endpoint of config.yaml${NC}"
    yq eval -i '.upstream_oauth2.providers[0].userinfo_endpoint = env(USERINFO_ENDPOINT)' /data/config.yaml
    {{- end }}
    {{- end }} {{/* end check for existing oauth2 secret */}}

    # finally, the clients section...
    {{- if .Values.mas.masClientSecret.existingSecret }}
    echo -e "\n${BLUE}Updating clients section of config.yaml${NC}"
    yq eval -i '.clients[0].client_id = env(MAS_CLIENT_ID)' /data/config.yaml && \
    yq eval -i '.clients[0].client_secret = env(MAS_CLIENT_SECRET)' /data/config.yaml
    {{- end }} {{/* end mas client secret existingSecret */}}

    cat /data/config.yaml

    echo -e "\n${BLUE}Done.${NC}"
